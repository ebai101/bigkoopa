import os
import base64
import typing_json as json
from typing import TypedDict

packet_types = ['eval', 'eval_r', 'wakeup', 'wakeup_r']


def nonce() -> str:
    return base64.b64encode(os.urandom(8), altchars=b'-_').decode('utf-8')


# packet format for turtle communication
# spec:
#     type = packet type, from packet_types. _r suffix means response
#     data = command payload for outgoing, response value for incoming
#     nonce = autogenerated nonce unique to each comand/response pair
class TurtlePacket(TypedDict):
    type: str
    data: str
    nonce: str


# turtle api functions
class TurtleAPI:

    def __serialize(self, p: dict) -> str:
        return json.dumps(p, TurtlePacket)

    def forward(self):
        print(
            self.__serialize({
                'type': 'eval',
                'data': 'return turtle.forward()',
                'nonce': nonce()
            }))

    def back(self):
        print(
            self.__serialize({
                'type': 'eval',
                'data': 'return turtle.back()',
                'nonce': nonce()
            }))

    def up(self):
        print(
            self.__serialize({
                'type': 'eval',
                'data': 'return turtle.up()',
                'nonce': nonce()
            }))

    def down(self):
        print(
            self.__serialize({
                'type': 'eval',
                'data': 'return turtle.down()',
                'nonce': nonce()
            }))
